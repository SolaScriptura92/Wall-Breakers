class Solution {
public:
    void solve(vector<vector<char>>& board) 
    {
        if(board.size() == 0 || board[0].size() == 0)
            return;
        
        else //perform dfs on all 'O' on border
        {
            
            int numRows = board.size();
            int numCols = board[0].size();
            
            //check top row and left row first
            //perform dfs on any 'O' that are found
            
            for(int i = 0; i < numCols; i++)
            {
                if(board[0][i] == 'O') //top row
                    dfs(1, i, board);
                
                if(board[numRows - 1][i] == 'O') //bottom row
                    dfs(numRows - 2, i, board);
            }
            
            //now check leftmost and rightmost columns
            
            
            for(int j = 0; j < numRows; j++)
            {
                if(board[j][0] == 'O') //left column
                    dfs(j, 1, board);
                
                if(board[j][numCols - 1] == 'O') //right column
                    dfs(j, numCols - 2, board);
            }
            
            //now just swap all remaining 'O''s to 'X' and all '*' back to 'O''s.
            
            for(int i = 1; i < numRows - 1; i++)
            {
                for(int j = 1; j < numCols - 1; j++)
                {
                    if(board[i][j] == '*')
                        board[i][j] = 'O';
                    
                    else if(board[i][j] == 'O')
                        board[i][j] = 'X';
                }
            }
            
            return;
        }
    }
    
    void dfs(int i, int j, vector<vector<char>>& board) //pass by referenece to change actual vector
    {
        if(i <= 0 || j <= 0 || i >= board.size() - 1 || j >= board[0].size() - 1 || board[i][j] == 'X' || board[i][j] == '*')
            return;
        
        //if() //hit road block
           // return;
        
        if(board[i][j] == 'O')
            board[i][j] = '*';
        
        dfs(i + 1, j, board); //perform depth-first search recursively on all nodes top, bottom, left of right from current node
        dfs(i - 1, j, board);
        dfs(i, j + 1, board);
        dfs(i, j - 1, board);
    }
};
